{"version":3,"sources":["components/Post/index.js","pages/Homepage/index.js","App.js","serviceWorker.js","index.js"],"names":["Post","match","useEffect","fetchFeeds","useState","listResult","setListResult","isDone","setIsDone","getAllFeedUrl","params","id","axios","get","then","res","feeds","data","i","feed","post","push","length","map","item","idx","key","toString","className","style","display","src","user_id","source","color","fontSize","marginLeft","create_time","content","HomePage","fetchRankingFeeds","listFeeds","setListFeed","setUser_id","timestamp","setTimestamp","listFiltered","setListFiltered","ranking_feeds","viewDetailList","Row","Col","sm","Form","Label","srOnly","Control","placeholder","onChange","event","target","value","FormControl","xs","Button","type","onClick","reslult","filter","request_timestamp","parseInt","window","location","href","to","path","component","App","exact","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87c15832.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\n\nfunction Post({match}) {\n\n    useEffect(() => {\n        fetchFeeds();\n    }, []);\n\n    const [listResult, setListResult] = useState([]);\n    const [isDone, setIsDone] = useState(false);\n\n    const fetchFeeds = () => {\n        let getAllFeedUrl = `/list_feed/user/${match.params.id}`;\n        setListResult([]);\n        axios.get(getAllFeedUrl)\n            .then(res => {\n                const feeds = res.data.feeds;\n                for (let i = 0; i < feeds.length; i++) {\n                    axios.get(`/posts/${feeds[i].id}`)\n                        .then(res => {\n                            const item = res.data.post;\n                            const feed = {post: item, feed: feeds[i]}\n                            listResult.push(feed);\n                            setListResult(listResult);\n                            if (i === feeds.length - 1) {\n                                setIsDone(true);\n                            }\n                        })\n                }\n            });\n    }\n\n    return (\n        <>\n        {isDone ? \n         <ul>\n         {listResult.map((item, idx) => (\n            <li key={idx.toString()} className=\"post\">\n                <div style={{display: 'inline'}}>\n                    <img src=\"https://image.shutterstock.com/image-vector/user-login-authenticate-icon-human-260nw-1365533969.jpg\"className=\"imgProfile\"></img>\n                    <h5>user_{item.post.user_id} {item.post.source != \"\" ? \"> \" : \"\"}{item.post.source}</h5>\n                </div>\n                <div className=\"create_time\" style={{color: 'gray', fontSize: '12px', marginLeft: '10px'}}>{item.post.create_time}</div>\n                <div>{item.post.content}</div>\n                {/* <img src={item.post.media}></img> */}\n                \n            </li>\n         ))}\n         </ul>\n         : \"loading\"\n        }\n       \n        </>\n    )\n}\n\nexport default Post;\n","import React, {useEffect, useState} from 'react';\n//import Slider from '../../components/Slider';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Post from '../../components/Post';\nimport {Form, FormControl, Button} from 'react-bootstrap';\n// import FormFillter from '../../components/FormFillter';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport axios from 'axios';\n\n\nfunction HomePage() {\n    \n    useEffect(() => {\n        fetchRankingFeeds();\n    }, []);\n\n    const [listFeeds, setListFeed] = useState([]);\n    const [user_id, setUser_id] = useState(\"\");\n    const [timestamp, setTimestamp] = useState(\"\");\n    const [listFiltered, setListFiltered] = useState([]);\n    const getAllFeedUrl = '/ranking_feeds';\n\n    const fetchRankingFeeds = () => {\n        axios.get(getAllFeedUrl)\n            .then(res => {\n                const feeds = res.data.ranking_feeds;\n                setListFeed(feeds);\n                setListFiltered(feeds);\n            });\n    }\n\n    function viewDetailList() {\n        \n    }\n\n    const handleOnchangeUserid = event => {\n        setUser_id(event.target.value);\n    }\n\n    const handleOnchangeTimestamp = event => {\n        setTimestamp(event.target.value)\n    }\n    \n    const filter = () => {\n        if (user_id != \"\" || timestamp != \"\") {\n            const reslult = listFeeds.filter(feed => {\n                if (feed.user_id == user_id || feed.request_timestamp <= parseInt(timestamp)) {\n                    return feed;\n                }\n            })\n            setListFiltered(reslult);\n        }\n        else {\n            window.location.href='/';\n        }\n    }\n\n\n    return(\n        <Router>\n            <Row>\n               <Col sm={4} className=\"leftCol\">\n                    <h4 className=\"center\">Ranking Request</h4>\n                    {/* Form tp filler */}\n                    <Form>\n                        <Form.Row className=\"align-items-center\">\n                            <Col sm={1}></Col>\n\n                            <Col sm={3} className=\"my-1\">\n                                <Form.Label srOnly>\n                                    Name\n                                </Form.Label>\n                                <Form.Control placeholder=\"user_id\" onChange={handleOnchangeUserid}/>\n                            </Col>\n\n                            <Col sm={4} className=\"my-1\">\n                                <Form.Label srOnly>\n                                    Username\n                                </Form.Label>\n                                <FormControl placeholder=\"req_timestamp\" onChange={handleOnchangeTimestamp}/>\n                            </Col>\n\n                            <Col xs=\"auto\" className=\"my-1\">\n                                <Button type=\"button\" onClick={filter}>Filter</Button>\n                            </Col>\n                        </Form.Row>\n                    </Form>\n                    {/* End of form */}\n                    \n                    {/* List the list ranking random */}\n                    <ul >\n                     {listFiltered.map((feeds, idx) => (\n                        <div key={idx.toString()}>\n                            <Link to={`/list_feed/${feeds.user_id}/${feeds.request_timestamp}`} >\n                                <a onClick={viewDetailList}>\n                                    <li style={{color: 'black'}}>\n                                        <div>User:{feeds.user_id}, request_timestamp:{feeds.request_timestamp}</div>\n                                    </li>\n                                </a>\n                            </Link>\n                        </div>\n                     ))}\n                     </ul>\n               </Col>\n               <Col sm={7} className=\"rightCol\">\n                   <h4 className=\"center\">List feeds</h4>\n                    <Route path=\"/list_feed/:id/:timestamp\" component={Post} />\n               </Col>\n               <Col sm={1}></Col>\n           </Row>\n        </Router>\n    )\n}\n\nexport default HomePage;\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\n// import Navbar from './components/Navbar';\nimport HomePage from './pages/Homepage';\nimport Post from './components/Post';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/index.html\" component={HomePage} />\n        <Route path=\"/list_feed/:id/:timestamp\" component={HomePage} />\n      </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}